# -*- coding: utf-8 -*-
"""Kopie von scratchpad

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AxYOpuT2XTJ9ddy9gYZl-XCz22TQHTIm
"""

import matplotlib.pyplot as plt
import numpy as np

# Daten für die Plots
x = np.linspace(0, 10, 100)
y1 = x
y2 = x**2
y3 = np.sin(x)
categories = ['A', 'B', 'C', 'D', 'E']
values = [3, 7, 8, 5, 2]
labels = ['Äpfel', 'Bananen', 'Kirschen', 'Datteln']
sizes = [30, 20, 25, 25]
data = np.random.randn(1000)
scatter_x = np.random.rand(50)
scatter_y = np.random.rand(50)

# Erstellen eines Figure-Objekts und von Subplots
fig, axs = plt.subplots(3, 2, figsize=(15, 15))

# Liniengrafik
axs[0, 0].plot(x, y1, label='y = x')
axs[0, 0].plot(x, y2, label='y = x^2')
axs[0, 0].set_xlabel('X-Werte')
axs[0, 0].set_ylabel('Y-Werte')
axs[0, 0].set_title('Liniengrafik')
axs[0, 0].legend()

# Balkendiagramm
axs[0, 1].bar(categories, values, color='skyblue')
axs[0, 1].set_xlabel('Kategorien')
axs[0, 1].set_ylabel('Werte')
axs[0, 1].set_title('Balkendiagramm')

# Kreisdiagramm
axs[1, 0].pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
axs[1, 0].set_title('Kreisdiagramm')

# Histogramm
axs[1, 1].hist(data, bins=30, edgecolor='black', color='lightgreen')
axs[1, 1].set_xlabel('Werte')
axs[1, 1].set_ylabel('Häufigkeit')
axs[1, 1].set_title('Histogramm')

# Scatter-Plot
axs[2, 0].scatter(scatter_x, scatter_y, color='red')
axs[2, 0].set_xlabel('X-Werte')
axs[2, 0].set_ylabel('Y-Werte')
axs[2, 0].set_title('Scatter-Plot')

# Einfache Sinusfunktion
axs[2, 1].plot(x, y3, color='purple')
axs[2, 1].set_xlabel('X-Werte')
axs[2, 1].set_ylabel('sin(X)')
axs[2, 1].set_title('Sinusfunktion')

# Layout anpassen und anzeigen
plt.tight_layout()
plt.show()

"""Beispiel 2"""

import matplotlib.pyplot as plt
import numpy as np

# Daten für die Plots
# Liniendiagramm-Daten
x_line = np.linspace(0, 10, 100)
y_line = np.sin(x_line)

# Balkendiagramm-Daten
categories = ['A', 'B', 'C', 'D', 'E']
values = [3, 7, 8, 5, 2]

# Histogramm-Daten
data_hist = np.random.randn(1000)

# Streudiagramm-Daten
x_scatter = np.random.rand(50)
y_scatter = np.random.rand(50)

# Erstellen eines Figure-Objekts und von Subplots
fig, axs = plt.subplots(2, 2, figsize=(12, 10))

# Liniendiagramm
axs[0, 0].plot(x_line, y_line, label='sin(x)')
axs[0, 0].set_xlabel('X-Werte')
axs[0, 0].set_ylabel('Y-Werte')
axs[0, 0].set_title('Liniendiagramm')
axs[0, 0].legend()

# Balkendiagramm
axs[0, 1].bar(categories, values, color='skyblue')
axs[0, 1].set_xlabel('Kategorien')
axs[0, 1].set_ylabel('Werte')
axs[0, 1].set_title('Balkendiagramm')

# Histogramm
axs[1, 0].hist(data_hist, bins=30, edgecolor='black', color='lightgreen')
axs[1, 0].set_xlabel('Werte')
axs[1, 0].set_ylabel('Häufigkeit')
axs[1, 0].set_title('Histogramm')

# Streudiagramm
axs[1, 1].scatter(x_scatter, y_scatter, color='red')
axs[1, 1].set_xlabel('X-Werte')
axs[1, 1].set_ylabel('Y-Werte')
axs[1, 1].set_title('Streudiagramm')

# Layout anpassen und anzeigen
plt.tight_layout()
plt.show()

"""Beispiel 3

"""

import pandas as pd
import matplotlib.pyplot as plt

# Pfad zur CSV-Datei
csv_path = 'spotify_tracks.csv'

# Versuche, die CSV-Datei zu laden
try:
    df = pd.read_csv(csv_path, delimiter=',')  # Passe das Trennzeichen an, falls nötig
except pd.errors.ParserError:
    print("Fehler beim Parsen der Datei. Überprüfe das Trennzeichen.")
    exit()

# Zeige die ersten fünf Zeilen an
print("Erste fünf Zeilen des DataFrames:")
print(df.head())

# Zeige eine Zusammenfassung des DataFrames an
print("\nZusammenfassung des DataFrames:")
print(df.info())

# Statistische Übersicht der numerischen Spalten
print("\nStatistische Übersicht der numerischen Spalten:")
print(df.describe())

# Konvertiere 'duration_ms' in den numerischen Typ
if 'duration_ms' in df.columns:
    df['duration_ms'] = pd.to_numeric(df['duration_ms'], errors='coerce')

# Überprüfe, ob die Spalte 'explicit' existiert und konvertiere sie
if 'explicit' in df.columns:
    df['explicit'] = df['explicit'].astype(bool)  # Konvertiere zu bool, falls nötig

# Berechne die durchschnittliche Popularität
if 'popularity' in df.columns:
    average_popularity = df['popularity'].mean()
    print("\nDurchschnittliche Popularität der Songs:", average_popularity)
else:
    print("\nPopularitäts-Spalte fehlt")

# Filtere Songs, die als explizit markiert sind
if 'explicit' in df.columns:
    explicit_songs = df[df['explicit'] == True]
    print("\nAnzahl der expliziten Songs:", len(explicit_songs))
else:
    print("\nExplizite Songs-Spalte fehlt")

# Berechne die durchschnittliche Dauer der Songs (in Sekunden)
if 'duration_ms' in df.columns:
    average_duration_sec = df['duration_ms'].mean() / 1000
    print("\nDurchschnittliche Dauer der Songs (in Sekunden):", average_duration_sec)
else:
    print("\nDauer-Spalte fehlt")

# Visualisiere die Verteilung der Popularität
if 'popularity' in df.columns:
    plt.figure(figsize=(10, 6))
    plt.hist(df['popularity'].dropna(), bins=20, color='skyblue', edgecolor='black')
    plt.title('Verteilung der Popularität der Songs')
    plt.xlabel('Popularität')
    plt.ylabel('Anzahl der Songs')
    plt.grid(True, linestyle='--', linewidth=0.5)
    plt.show()
else:
    print("\nKeine Visualisierung der Popularität möglich, da die Spalte fehlt.")